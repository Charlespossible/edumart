// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName   String   @default("Unknown") // Add a default value
  lastName    String   @default("Unknown") // Add a default value
  email     String     @unique
  phoneNumber String   @default("0000000000")
  password  String
  referer   String? 
  role       Role      @default(USER) 
  createdAt DateTime @default(now())
  exams      ExamResult[]
  otp        String? 
  otpExpires  DateTime?
  resetToken String?
}

model Admin {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(ADMIN)
  createdAt  DateTime @default(now())
}


model Exam {
  id                Int      @id @default(autoincrement())
  questionsGroupId  String   // Foreign key to a group/category table
  subjectName       String
  examType          String   @default("WAEC")
  year              Int
  optionA           String?
  optionB           String?
  optionC           String?
  optionD           String?
  correctAnswer     String?
  explanation       String?
  question          String
  questionImageUrl  String?
  hasImage          Boolean?  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  questions         Question[]
  examResults       ExamResult[]
}

model Question {
  id          Int      @id @default(autoincrement())
  text        String
  options     String[]
  correctAnswer String
  subject     String  
  examYear    Int  
  exam        Exam?   @relation(fields: [examId], references: [id])
  examId      Int?
  createdAt   DateTime @default(now())
}

model ExamResult  {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  exam       Exam     @relation(fields: [examId], references: [id])
  examId     Int
  score      Int
  createdAt  DateTime @default(now())
}

model Testimonial {
  id          Int      @id @default(autoincrement())
  name        String   
  title       String   
  content     String   
  image       String?  
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
}

enum Role {
  USER
  ADMIN 
}


